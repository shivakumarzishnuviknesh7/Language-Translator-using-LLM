# -*- coding: utf-8 -*-
"""Language-Translator-using-LLM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1UZL1tpRnuZoVRFMf1tzOpOd3yhPv4Z
"""

!pip install transformers torch

!pip install streamlit
!pip install streamlit transformers torch

import streamlit as st
from transformers import MarianMTModel, MarianTokenizer


# List of available language pairs (validated)
language_pairs = {
    "en-fr": "Helsinki-NLP/opus-mt-en-fr",
    "en-de": "Helsinki-NLP/opus-mt-en-de",
    "en-es": "Helsinki-NLP/opus-mt-en-es",
}

models = {}
tokenizers = {}

for pair, model_name in language_pairs.items():
    tokenizers[pair] = MarianTokenizer.from_pretrained(model_name)
    models[pair] = MarianMTModel.from_pretrained(model_name)

def translate_text(text, src_lang, tgt_lang):
    pair = f"{src_lang}-{tgt_lang}"
    if pair not in models or pair not in tokenizers:
        raise ValueError(f"Translation model for {pair} not available.")

    tokenizer = tokenizers[pair]
    model = models[pair]

    # Tokenize the text
    tokenized_text = tokenizer(text, return_tensors="pt", padding=True, truncation=True)

    # Perform translation
    translated_tokens = model.generate(**tokenized_text)

    # Decode the tokens to get the translated text
    translated_text = tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]

    return translated_text

# Streamlit UI
streamlit_code = """
st.title("Language Translator")

text = st.text_area("Enter text to translate", "Hello, how are you?")
target_language = st.selectbox("Select target language", ["French", "German", "Spanish"])

if st.button("Translate"):
    translated_text = translate_text(text, "en", target_language[:2].lower())
    st.write(f"Translated text in {target_language}:")
    st.write(translated_text)
"""

# Write the Streamlit app code to a Python file
with open("app.py", "w") as f:
    f.write(streamlit_code)

!streamlit run app.py